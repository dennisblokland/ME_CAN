/** CAN message encoder/decoder: automatically generated - do not edit
  * Generated by dbcc: See https://github.com/howerj/dbcc */
#ifndef TEST_H
#define TEST_H

#include <stdint.h>
#include <stdio.h>

#ifdef __cplusplus
extern "C" { 
#endif

#ifndef PREPACK
#define PREPACK
#endif

#ifndef POSTPACK
#define POSTPACK
#endif

#ifndef DBCC_TIME_STAMP
#define DBCC_TIME_STAMP
typedef uint32_t dbcc_time_stamp_t; /* Time stamp for message; you decide on units */
#endif

#ifndef DBCC_STATUS_ENUM
#define DBCC_STATUS_ENUM
typedef enum {
	DBCC_SIG_STAT_UNINITIALIZED_E = 0, /* Message never sent/received */
	DBCC_SIG_STAT_OK_E            = 1, /* Message ok */
	DBCC_SIG_STAT_ERROR_E         = 2, /* Encode/Decode/Timestamp/Any error */
} dbcc_signal_status_e;
#endif

typedef PREPACK struct {
	uint16_t RPM; /* scaling 1.0, offset 0.0, units none  */
	int16_t TPS; /* scaling 0.1, offset 0.0, units %  */
	uint16_t MAP; /* scaling 0.0, offset 0.0, units kPa  */
	int16_t IAT; /* scaling 0.1, offset 0.0, units deg C  */
} POSTPACK can_0x300_ME1_1_t;

typedef PREPACK struct {
	uint16_t RPM_HardLimit; /* scaling 0.4, offset 0.0, units none  */
	uint16_t Lambda_Trim; /* scaling 0.0, offset 0.0, units none  */
	uint8_t AFRCurr_1; /* scaling 0.1, offset 7.5, units none  */
	uint8_t AFRCurr_2; /* scaling 0.1, offset 7.5, units none  */
	uint8_t AFR_Target; /* scaling 0.1, offset 7.5, units none  */
	uint8_t Fuel_Eth_Perc; /* scaling 0.5, offset 0.0, units %  */
} POSTPACK can_0x301_ME1_2_t;

typedef PREPACK struct {
	int16_t IgnAdvAngle; /* scaling 0.1, offset 0.0, units deg  */
	int16_t IgnDwell; /* scaling 0.1, offset 0.0, units ms  */
	int16_t Pri_InjAngle; /* scaling 0.1, offset 0.0, units deg  */
	int16_t Pri_InjPw; /* scaling 0.1, offset 0.0, units ms  */
} POSTPACK can_0x302_ME1_3_t;

typedef PREPACK struct {
	int16_t Sec_InjAngle; /* scaling 0.1, offset 0.0, units deg  */
	int16_t Sec_InjPw; /* scaling 0.1, offset 0.0, units ms  */
	uint8_t Pri_InjDuty; /* scaling 0.5, offset 0.0, units %  */
	uint8_t Sec_InjDuty; /* scaling 0.5, offset 0.0, units %  */
	uint8_t Boost_Ctrl_Duty; /* scaling 0.5, offset 0.0, units %  */
} POSTPACK can_0x303_ME1_4_t;

typedef PREPACK struct {
	int16_t Oil_T; /* scaling 0.1, offset 0.0, units deg C  */
	int16_t Oil_P; /* scaling 0.1, offset 0.0, units kPa  */
	int16_t CLT; /* scaling 0.1, offset 0.0, units deg C  */
	int16_t VBAT; /* scaling 0.1, offset 0.0, units V  */
} POSTPACK can_0x304_ME1_5_t;

typedef PREPACK struct {
	uint16_t MAP_Target; /* scaling 0.0, offset 0.0, units kPa  */
	uint16_t Vehicle_Speed; /* scaling 0.0, offset 0.0, units kph  */
	uint16_t EPS_Ev_Msk; /* scaling 1.0, offset 0.0, units none  */
	uint8_t Gear_Pos; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x305_ME1_6_t;

typedef PREPACK struct {
	uint16_t Knock_Reading; /* scaling 1.0, offset 0.0, units none  */
	uint16_t EGT_1; /* scaling 0.1, offset 0.0, units deg C  */
	int8_t Knock_Ign_Adv_Mod; /* scaling 0.1, offset 0.0, units deg  */
	uint8_t Fuel_Press; /* scaling 5.0, offset 0.0, units kPa  */
	uint8_t Fuel_Temp; /* scaling 1.0, offset 0.0, units deg C  */
} POSTPACK can_0x306_ME1_7_t;

typedef PREPACK struct {
	uint16_t EGT_2; /* scaling 0.1, offset 0.0, units deg C  */
	int16_t GPT_1; /* scaling 1.0, offset 0.0, units none  */
	int16_t GPT_2; /* scaling 1.0, offset 0.0, units none  */
} POSTPACK can_0x307_ME1_8_t;

typedef PREPACK struct {
	uint16_t Vehicle_Speed; /* scaling 0.0, offset 0.0, units kph  */
} POSTPACK can_0x340_ME1_In_1_t;

typedef PREPACK struct {
	dbcc_time_stamp_t can_0x300_ME1_1_time_stamp_rx;
	dbcc_time_stamp_t can_0x301_ME1_2_time_stamp_rx;
	dbcc_time_stamp_t can_0x302_ME1_3_time_stamp_rx;
	dbcc_time_stamp_t can_0x303_ME1_4_time_stamp_rx;
	dbcc_time_stamp_t can_0x304_ME1_5_time_stamp_rx;
	dbcc_time_stamp_t can_0x305_ME1_6_time_stamp_rx;
	dbcc_time_stamp_t can_0x306_ME1_7_time_stamp_rx;
	dbcc_time_stamp_t can_0x307_ME1_8_time_stamp_rx;
	dbcc_time_stamp_t can_0x340_ME1_In_1_time_stamp_rx;
	unsigned can_0x300_ME1_1_status : 2;
	unsigned can_0x300_ME1_1_tx : 1;
	unsigned can_0x300_ME1_1_rx : 1;
	unsigned can_0x301_ME1_2_status : 2;
	unsigned can_0x301_ME1_2_tx : 1;
	unsigned can_0x301_ME1_2_rx : 1;
	unsigned can_0x302_ME1_3_status : 2;
	unsigned can_0x302_ME1_3_tx : 1;
	unsigned can_0x302_ME1_3_rx : 1;
	unsigned can_0x303_ME1_4_status : 2;
	unsigned can_0x303_ME1_4_tx : 1;
	unsigned can_0x303_ME1_4_rx : 1;
	unsigned can_0x304_ME1_5_status : 2;
	unsigned can_0x304_ME1_5_tx : 1;
	unsigned can_0x304_ME1_5_rx : 1;
	unsigned can_0x305_ME1_6_status : 2;
	unsigned can_0x305_ME1_6_tx : 1;
	unsigned can_0x305_ME1_6_rx : 1;
	unsigned can_0x306_ME1_7_status : 2;
	unsigned can_0x306_ME1_7_tx : 1;
	unsigned can_0x306_ME1_7_rx : 1;
	unsigned can_0x307_ME1_8_status : 2;
	unsigned can_0x307_ME1_8_tx : 1;
	unsigned can_0x307_ME1_8_rx : 1;
	unsigned can_0x340_ME1_In_1_status : 2;
	unsigned can_0x340_ME1_In_1_tx : 1;
	unsigned can_0x340_ME1_In_1_rx : 1;
	can_0x300_ME1_1_t can_0x300_ME1_1;
	can_0x301_ME1_2_t can_0x301_ME1_2;
	can_0x302_ME1_3_t can_0x302_ME1_3;
	can_0x303_ME1_4_t can_0x303_ME1_4;
	can_0x304_ME1_5_t can_0x304_ME1_5;
	can_0x305_ME1_6_t can_0x305_ME1_6;
	can_0x306_ME1_7_t can_0x306_ME1_7;
	can_0x307_ME1_8_t can_0x307_ME1_8;
	can_0x340_ME1_In_1_t can_0x340_ME1_In_1;
} POSTPACK can_obj_test_h_t;

int unpack_message(can_obj_test_h_t *o, const unsigned long id, uint64_t data, uint8_t dlc, dbcc_time_stamp_t time_stamp);
int pack_message(can_obj_test_h_t *o, const unsigned long id, uint64_t *data);
int print_message(const can_obj_test_h_t *o, const unsigned long id, FILE *output);

int decode_can_0x300_RPM(const can_obj_test_h_t *o, uint16_t *out);
int encode_can_0x300_RPM(can_obj_test_h_t *o, uint16_t in);
int decode_can_0x300_TPS(const can_obj_test_h_t *o, double *out);
int encode_can_0x300_TPS(can_obj_test_h_t *o, double in);
int decode_can_0x300_MAP(const can_obj_test_h_t *o, double *out);
int encode_can_0x300_MAP(can_obj_test_h_t *o, double in);
int decode_can_0x300_IAT(const can_obj_test_h_t *o, double *out);
int encode_can_0x300_IAT(can_obj_test_h_t *o, double in);


int decode_can_0x301_RPM_HardLimit(const can_obj_test_h_t *o, double *out);
int encode_can_0x301_RPM_HardLimit(can_obj_test_h_t *o, double in);
int decode_can_0x301_Lambda_Trim(const can_obj_test_h_t *o, double *out);
int encode_can_0x301_Lambda_Trim(can_obj_test_h_t *o, double in);
int decode_can_0x301_AFRCurr_1(const can_obj_test_h_t *o, double *out);
int encode_can_0x301_AFRCurr_1(can_obj_test_h_t *o, double in);
int decode_can_0x301_AFRCurr_2(const can_obj_test_h_t *o, double *out);
int encode_can_0x301_AFRCurr_2(can_obj_test_h_t *o, double in);
int decode_can_0x301_AFR_Target(const can_obj_test_h_t *o, double *out);
int encode_can_0x301_AFR_Target(can_obj_test_h_t *o, double in);
int decode_can_0x301_Fuel_Eth_Perc(const can_obj_test_h_t *o, double *out);
int encode_can_0x301_Fuel_Eth_Perc(can_obj_test_h_t *o, double in);


int decode_can_0x302_IgnAdvAngle(const can_obj_test_h_t *o, double *out);
int encode_can_0x302_IgnAdvAngle(can_obj_test_h_t *o, double in);
int decode_can_0x302_IgnDwell(const can_obj_test_h_t *o, double *out);
int encode_can_0x302_IgnDwell(can_obj_test_h_t *o, double in);
int decode_can_0x302_Pri_InjAngle(const can_obj_test_h_t *o, double *out);
int encode_can_0x302_Pri_InjAngle(can_obj_test_h_t *o, double in);
int decode_can_0x302_Pri_InjPw(const can_obj_test_h_t *o, double *out);
int encode_can_0x302_Pri_InjPw(can_obj_test_h_t *o, double in);


int decode_can_0x303_Sec_InjAngle(const can_obj_test_h_t *o, double *out);
int encode_can_0x303_Sec_InjAngle(can_obj_test_h_t *o, double in);
int decode_can_0x303_Sec_InjPw(const can_obj_test_h_t *o, double *out);
int encode_can_0x303_Sec_InjPw(can_obj_test_h_t *o, double in);
int decode_can_0x303_Pri_InjDuty(const can_obj_test_h_t *o, double *out);
int encode_can_0x303_Pri_InjDuty(can_obj_test_h_t *o, double in);
int decode_can_0x303_Sec_InjDuty(const can_obj_test_h_t *o, double *out);
int encode_can_0x303_Sec_InjDuty(can_obj_test_h_t *o, double in);
int decode_can_0x303_Boost_Ctrl_Duty(const can_obj_test_h_t *o, double *out);
int encode_can_0x303_Boost_Ctrl_Duty(can_obj_test_h_t *o, double in);


int decode_can_0x304_Oil_T(const can_obj_test_h_t *o, double *out);
int encode_can_0x304_Oil_T(can_obj_test_h_t *o, double in);
int decode_can_0x304_Oil_P(const can_obj_test_h_t *o, double *out);
int encode_can_0x304_Oil_P(can_obj_test_h_t *o, double in);
int decode_can_0x304_CLT(const can_obj_test_h_t *o, double *out);
int encode_can_0x304_CLT(can_obj_test_h_t *o, double in);
int decode_can_0x304_VBAT(const can_obj_test_h_t *o, double *out);
int encode_can_0x304_VBAT(can_obj_test_h_t *o, double in);


int decode_can_0x305_MAP_Target(const can_obj_test_h_t *o, double *out);
int encode_can_0x305_MAP_Target(can_obj_test_h_t *o, double in);
int decode_can_0x305_Vehicle_Speed(const can_obj_test_h_t *o, double *out);
int encode_can_0x305_Vehicle_Speed(can_obj_test_h_t *o, double in);
int decode_can_0x305_EPS_Ev_Msk(const can_obj_test_h_t *o, uint16_t *out);
int encode_can_0x305_EPS_Ev_Msk(can_obj_test_h_t *o, uint16_t in);
int decode_can_0x305_Gear_Pos(const can_obj_test_h_t *o, uint8_t *out);
int encode_can_0x305_Gear_Pos(can_obj_test_h_t *o, uint8_t in);


int decode_can_0x306_Knock_Reading(const can_obj_test_h_t *o, uint16_t *out);
int encode_can_0x306_Knock_Reading(can_obj_test_h_t *o, uint16_t in);
int decode_can_0x306_EGT_1(const can_obj_test_h_t *o, double *out);
int encode_can_0x306_EGT_1(can_obj_test_h_t *o, double in);
int decode_can_0x306_Knock_Ign_Adv_Mod(const can_obj_test_h_t *o, double *out);
int encode_can_0x306_Knock_Ign_Adv_Mod(can_obj_test_h_t *o, double in);
int decode_can_0x306_Fuel_Press(const can_obj_test_h_t *o, double *out);
int encode_can_0x306_Fuel_Press(can_obj_test_h_t *o, double in);
int decode_can_0x306_Fuel_Temp(const can_obj_test_h_t *o, uint8_t *out);
int encode_can_0x306_Fuel_Temp(can_obj_test_h_t *o, uint8_t in);


int decode_can_0x307_EGT_2(const can_obj_test_h_t *o, double *out);
int encode_can_0x307_EGT_2(can_obj_test_h_t *o, double in);
int decode_can_0x307_GPT_1(const can_obj_test_h_t *o, int16_t *out);
int encode_can_0x307_GPT_1(can_obj_test_h_t *o, int16_t in);
int decode_can_0x307_GPT_2(const can_obj_test_h_t *o, int16_t *out);
int encode_can_0x307_GPT_2(can_obj_test_h_t *o, int16_t in);


int decode_can_0x340_Vehicle_Speed(const can_obj_test_h_t *o, double *out);
int encode_can_0x340_Vehicle_Speed(can_obj_test_h_t *o, double in);


#ifdef __cplusplus
} 
#endif

#endif
